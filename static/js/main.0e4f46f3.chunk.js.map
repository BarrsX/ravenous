{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","App.js","registerServiceWorker.js","index.js"],"names":["Business","React","Component","constructor","super","this","state","link","componentDidMount","address","city","zipCode","name","props","business","mapsUrl","constructGoogleMapsSearchUrl","setState","formattedAddress","concat","encodedQuery","encodeURIComponent","render","createElement","className","src","imageSrc","alt","Link","underline","href","target","rel","category","rating","reviewCount","BusinessList","isLoading","searchPerformed","businesses","length","map","key","id","SearchBar","sortByOptions","getUserLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","reverseGeocode","error","console","url","process","fetch","then","response","json","data","results","address_components","find","component","types","includes","location","long_name","catch","term","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","getSortByClass","sortByOption","handleSortByChange","event","value","preventDefault","searchYelp","renderSortByOptions","Object","keys","sortByOptionValue","onClick","type","onChange","placeholder","Yelp","search","headers","Authorization","ok","status","jsonResponse","_business$categories$","image_url","address1","zip_code","categories","title","review_count","coordinates","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","ReactDOM","document","getElementById","URL","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0e4f46f3.chunk.js","sourcesContent":["import { Link } from \"@mui/material\";\nimport React from \"react\";\n// import axios from 'axios';\nimport \"./Business.css\";\n\nclass Business extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      link: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const { address, city, state, zipCode, name } = this.props.business;\n    const mapsUrl = this.constructGoogleMapsSearchUrl(\n      address,\n      city,\n      state,\n      zipCode,\n      name\n    );\n    this.setState({ link: mapsUrl });\n  }\n\n  constructGoogleMapsSearchUrl(address, city, state, zipCode, name) {\n    const formattedAddress = `${address}, ${city}, ${state} ${zipCode}`;\n    const encodedQuery = encodeURIComponent(`${name} ${formattedAddress}`);\n    const url = `https://www.google.com/maps/search/?api=1&query=${encodedQuery}`;\n\n    return url;\n  }\n\n  render() {\n    return (\n      <div className=\"Business\">\n        <div className=\"image-container\">\n          <img\n            src={this.props.business.imageSrc}\n            alt={this.props.business.name}\n          />\n        </div>\n        <h2>{this.props.business.name}</h2>\n        <div className=\"Business-information\">\n          <div className=\"Business-address\">\n            <Link\n              underline=\"none\"\n              href={this.state.link}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <p>{this.props.business.address}</p>\n              <p>{this.props.business.city}</p>\n              <p>\n                {this.props.business.state}, {this.props.business.zipCode}\n              </p>\n            </Link>\n          </div>\n          <div className=\"Business-reviews\">\n            <h3>{this.props.business.category}</h3>\n            <h3 className=\"rating\">{this.props.business.rating} stars</h3>\n            <p>{this.props.business.reviewCount} reviews</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Business;\n","import React from \"react\";\nimport Business from \"../Business/Business\";\nimport \"./BusinessList.css\";\nimport \"../../LoadingBar.css\";\n\nclass BusinessList extends React.Component {\n  render() {\n    return (\n      <div className=\"BusinessList\">\n        {this.props.isLoading ? (\n          <div className=\"LoadingBar\"></div>\n        ) : !this.props.searchPerformed ? (\n          <div className=\"BusinessList-empty\">\n            <p>\n              Please enter a type of food and location to get recommendations.\n            </p>\n          </div>\n        ) : this.props.businesses.length === 0 ? (\n          <div className=\"BusinessList-empty\">\n            <p>No businesses found. Please try another search.</p>\n          </div>\n        ) : (\n          this.props.businesses.map((business) => {\n            return <Business business={business} key={business.id} />;\n          })\n        )}\n      </div>\n    );\n  }\n}\n\nexport default BusinessList;\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: \"\",\r\n      location: \"\",\r\n      sortBy: \"best_match\",\r\n    };\r\n\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n  }\r\n\r\n  sortByOptions = {\r\n    \"Best Match\": \"best_match\",\r\n    \"Highest Rated\": \"rating\",\r\n    \"Most Reviewed\": \"review_count\",\r\n  };\r\n\r\n  getSortByClass(sortByOption) {\r\n    if (this.state.sortBy === sortByOption) {\r\n      return \"active\";\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  // Handle State Changes\r\n  handleSortByChange(sortByOption) {\r\n    this.setState(\r\n      {\r\n        sortBy: sortByOption,\r\n      },\r\n      () => {\r\n        this.handleSearch();\r\n      }\r\n    );\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({\r\n      term: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleLocationChange(event) {\r\n    this.setState({\r\n      location: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleSearch(event) {\r\n    if (event) event.preventDefault();\r\n    if (this.state.term && this.state.location) {\r\n      this.props.searchYelp(\r\n        this.state.term,\r\n        this.state.location,\r\n        this.state.sortBy\r\n      );\r\n    }\r\n  }\r\n\r\n  getUserLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          this.reverseGeocode(latitude, longitude);\r\n        },\r\n        (error) => {\r\n          console.error(\"Error getting user location:\", error);\r\n        }\r\n      );\r\n    } else {\r\n      console.error(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  };\r\n\r\n  reverseGeocode = (latitude, longitude) => {\r\n    const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\r\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${apiKey}`;\r\n\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.results && data.results.length > 0) {\r\n          const zipCode = data.results[0].address_components.find((component) =>\r\n            component.types.includes(\"postal_code\")\r\n          );\r\n          if (zipCode) {\r\n            this.setState({ location: zipCode.long_name });\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => console.error(\"Error reverse geocoding:\", error));\r\n  };\r\n\r\n  renderSortByOptions() {\r\n    return Object.keys(this.sortByOptions).map((sortByOption) => {\r\n      let sortByOptionValue = this.sortByOptions[sortByOption];\r\n      return (\r\n        <li key={sortByOptionValue}>\r\n          <button\r\n            className={this.getSortByClass(sortByOptionValue)}\r\n            onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\r\n            type=\"button\"\r\n          >\r\n            {sortByOption}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <div className=\"SearchBar-sort-options\">\r\n          <ul>{this.renderSortByOptions()}</ul>\r\n        </div>\r\n        <div className=\"SearchBar-fields\">\r\n          <input\r\n            onChange={this.handleTermChange}\r\n            placeholder=\"Search Businesses\"\r\n          />\r\n          <input\r\n            onChange={this.handleLocationChange}\r\n            placeholder=\"Where?\"\r\n            value={this.state.location}\r\n          />\r\n          <button onClick={this.getUserLocation}>Use My Location</button>\r\n        </div>\r\n        <div className=\"SearchBar-submit\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"SearchBar-button\"\r\n            onClick={this.handleSearch}\r\n          >\r\n            Let's Go\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","const Yelp = {\r\n  search(term, location, sortBy) {\r\n    return (\r\n      fetch(\r\n        `https://morning-stream-08762.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}&limit=48`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${process.env.REACT_APP_YELP_API_KEY}`,\r\n          },\r\n        }\r\n      )\r\n        .then((response) => {\r\n          // Add check for successful response\r\n          if (!response.ok) {\r\n            // Throw an error or return a specific error object/message\r\n            // Returning an empty array for simplicity here, but could be more specific\r\n            console.error(`HTTP error! status: ${response.status}`);\r\n            return []; // Or throw new Error('Network response was not ok');\r\n          }\r\n          return response.json();\r\n        })\r\n        .then((jsonResponse) => {\r\n          if (jsonResponse.businesses) {\r\n            return jsonResponse.businesses.map((business) => {\r\n              return {\r\n                id: business.id,\r\n                imageSrc: business.image_url,\r\n                name: business.name,\r\n                address: business.location.address1,\r\n                city: business.location.city,\r\n                state: business.location.state,\r\n                zipCode: business.location.zip_code,\r\n                category: business.categories[0]?.title || \"N/A\", // Handle potential missing category\r\n                rating: business.rating,\r\n                reviewCount: business.review_count,\r\n                longitude: business.coordinates.longitude,\r\n                latitude: business.coordinates.latitude,\r\n              };\r\n            });\r\n          } else {\r\n            // Handle cases where 'businesses' key is missing in a successful response\r\n            return [];\r\n          }\r\n        })\r\n        // Add catch block for network errors or errors during processing\r\n        .catch((error) => {\r\n          console.error(\"Error fetching or processing Yelp data:\", error);\r\n          // Return empty array or re-throw error depending on desired app behavior\r\n          return [];\r\n        })\r\n    );\r\n  },\r\n};\r\n\r\nexport default Yelp;\r\n","import React from \"react\";\nimport BusinessList from \"./components/BusinessList/BusinessList\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport Yelp from \"./util/Yelp\";\nimport \"./App.css\";\nimport \"./LoadingBar.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: [],\n      searchPerformed: false,\n      isLoading: false,\n    };\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    this.setState({ isLoading: true });\n    Yelp.search(term, location, sortBy).then((businesses) => {\n      this.setState({\n        businesses: businesses,\n        searchPerformed: true,\n        isLoading: false,\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList\n          businesses={this.state.businesses}\n          searchPerformed={this.state.searchPerformed}\n          isLoading={this.state.isLoading}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}