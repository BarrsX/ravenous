{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","App.js","registerServiceWorker.js","index.js"],"names":["Business","state","link","this","getPlaceID","props","business","latitude","longitude","name","then","x","setState","lat","long","bizName","replace","searchString","fetch","response","json","status","candidates","place_id","placeId","className","src","imageSrc","alt","Link","underline","href","target","rel","address","city","zipCode","category","rating","reviewCount","React","Component","BusinessList","searchPerformed","businesses","length","map","key","id","SearchBar","sortByOptions","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","event","value","preventDefault","searchYelp","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","onChange","placeholder","Yelp","search","headers","Authorization","process","jsonResponse","image_url","address1","zip_code","categories","title","review_count","coordinates","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b923d8ed.chunk.js","sourcesContent":["import { Link } from '@mui/material';\nimport React from 'react';\n// import axios from 'axios';\nimport './Business.css';\n\n\nclass Business extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            link: ''\n        };\n    }\n\n    componentDidMount() {\n        this.getPlaceID(this.props.business.latitude, this.props.business.longitude, this.props.business.name)\n            .then(x => this.setState({\n                link: x\n            }));\n    }\n\n    getPlaceID(lat, long, name) {\n        let apiKey = 'AIzaSyAFjagYUP76eJQmoDDGze9TtHboIBpY_0s';\n        var bizName = name.replace(' ', '%20');\n\n        var searchString = `https://morning-stream-08762.herokuapp.com/https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=${bizName}&inputtype=textquery&locationbias=circle%3A2000%40${lat}%2C${long}&fields=place_id&key=${apiKey}`;\n\n        return fetch(searchString)\n            .then(response => response.json())\n            .then(json => {\n                if (json.status === 'OK') {\n                    return json.candidates[0].place_id;\n                }\n            })\n            .then(placeId => {\n                if (placeId) {\n                    return `https://www.google.com/maps/search/?api=1&query=Google&query_place_id=${placeId}`;\n                } else {\n                    return `https://maps.google.com?q=${this.props.business.latitude},${this.props.business.longitude}`\n                }\n            });\n    };\n    \n    render() {\n        return (\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <img src={this.props.business.imageSrc} alt={this.props.business.name} />\n                </div>\n                <h2>{this.props.business.name}</h2>\n                <div className=\"Business-information\">\n                    <div className=\"Business-address\">\n                        <Link underline='none' href={this.state.link} target='_blank' rel='noopener noreferrer'>\n                            <p>{this.props.business.address}</p>\n                            <p>{this.props.business.city}</p>\n                            <p>{this.props.business.state}, {this.props.business.zipCode}</p>\n                        </Link>\n                    </div>\n                    <div className=\"Business-reviews\">\n                        <h3>{this.props.business.category}</h3>\n                        <h3 className=\"rating\">{this.props.business.rating} stars</h3>\n                        <p>{this.props.business.reviewCount} reviews</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Business;\n","import React from \"react\";\nimport Business from \"../Business/Business\";\nimport \"./BusinessList.css\";\n\nclass BusinessList extends React.Component {\n  render() {\n    if (!this.props.searchPerformed) {\n      return (\n        <div className=\"BusinessList BusinessList-empty\">\n          <p>\n            Please enter a type of food and location to get recommendations.\n          </p>\n        </div>\n      );\n    } else if (this.props.businesses.length === 0) {\n      return (\n        <div className=\"BusinessList BusinessList-empty\">\n          <p>No businesses found. Please try another search.</p>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"BusinessList\">\n          {this.props.businesses.map((business) => {\n            return <Business business={business} key={business.id} />;\n          })}\n        </div>\n      );\n    }\n  }\n}\n\nexport default BusinessList;\n","import { Link } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: \"\",\r\n      location: \"\",\r\n      sortBy: \"best_match\",\r\n    };\r\n\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n  }\r\n\r\n  sortByOptions = {\r\n    \"Best Match\": \"best_match\",\r\n    \"Highest Rated\": \"rating\",\r\n    \"Most Reviewed\": \"review_count\",\r\n  };\r\n\r\n  getSortByClass(sortByOption) {\r\n    if (this.state.sortBy === sortByOption) {\r\n      return \"active\";\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  // Handle State Changes\r\n  handleSortByChange(sortByOption) {\r\n    this.setState(\r\n      {\r\n        sortBy: sortByOption,\r\n      },\r\n      () => {\r\n        this.handleSearch();\r\n      }\r\n    );\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({\r\n      term: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleLocationChange(event) {\r\n    this.setState({\r\n      location: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleSearch(event) {\r\n    if (event) event.preventDefault();\r\n    if (this.state.term && this.state.location) {\r\n      this.props.searchYelp(\r\n        this.state.term,\r\n        this.state.location,\r\n        this.state.sortBy\r\n      );\r\n    }\r\n  }\r\n\r\n  renderSortByOptions() {\r\n    return Object.keys(this.sortByOptions).map((sortByOption) => {\r\n      let sortByOptionValue = this.sortByOptions[sortByOption];\r\n      return (\r\n        <li\r\n          className={this.getSortByClass(sortByOptionValue)}\r\n          key={sortByOptionValue}\r\n          onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\r\n        >\r\n          {sortByOption}\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <div className=\"SearchBar-sort-options\">\r\n          <ul>{this.renderSortByOptions()}</ul>\r\n        </div>\r\n        <div className=\"SearchBar-fields\">\r\n          <input\r\n            onChange={this.handleTermChange}\r\n            placeholder=\"Search Businesses\"\r\n          />\r\n          <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n        </div>\r\n        <div className=\"SearchBar-submit\">\r\n          <Link underline=\"none\" onClick={this.handleSearch}>\r\n            Let's Go\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","const Yelp = {\r\n  search(term, location, sortBy) {\r\n    return fetch(\r\n      `https://morning-stream-08762.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}&limit=48`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${process.env.REACT_APP_YELP_API_KEY}`\r\n        }\r\n      }\r\n    )\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(jsonResponse => {\r\n        if (jsonResponse.businesses) {\r\n          return jsonResponse.businesses.map(business => {\r\n            return {\r\n              id: business.id,\r\n              imageSrc: business.image_url,\r\n              name: business.name,\r\n              address: business.location.address1,\r\n              city: business.location.city,\r\n              state: business.location.state,\r\n              zipCode: business.location.zip_code,\r\n              category: business.categories[0].title,\r\n              rating: business.rating,\r\n              reviewCount: business.review_count,\r\n              longitude: business.coordinates.longitude,\r\n              latitude: business.coordinates.latitude\r\n            };\r\n          });\r\n        }\r\n      });\r\n  }\r\n};\r\n\r\n\r\nexport default Yelp;\r\n","import React from \"react\";\nimport BusinessList from \"./components/BusinessList/BusinessList\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport Yelp from \"./util/Yelp\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: [],\n      searchPerformed: false,\n    };\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then((businesses) => {\n      this.setState({\n        businesses: businesses,\n        searchPerformed: true,\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList\n          businesses={this.state.businesses}\n          searchPerformed={this.state.searchPerformed}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}