{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","App.js","registerServiceWorker.js","index.js"],"names":["Business","state","link","this","getPlaceID","props","business","latitude","longitude","name","then","x","setState","lat","long","bizName","replace","searchString","fetch","response","json","status","candidates","place_id","placeId","className","src","imageSrc","alt","Link","underline","href","target","rel","address","city","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","sortByOptions","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","event","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","onChange","placeholder","Yelp","search","headers","Authorization","jsonResponse","image_url","address1","zip_code","categories","title","review_count","coordinates","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.bb54f29d.chunk.js","sourcesContent":["import { Link } from '@mui/material';\r\nimport React from 'react';\r\n// import axios from 'axios';\r\nimport './Business.css';\r\n\r\n\r\nclass Business extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            link: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getPlaceID(this.props.business.latitude, this.props.business.longitude, this.props.business.name)\r\n            .then(x => this.setState({\r\n                link: x\r\n            }));\r\n    }\r\n\r\n    getPlaceID(lat, long, name) {\r\n        let apiKey = 'AIzaSyAFjagYUP76eJQmoDDGze9TtHboIBpY_0s';\r\n        var bizName = name.replace(' ', '%20');\r\n\r\n        var searchString = `https://morning-stream-08762.herokuapp.com/https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=${bizName}&inputtype=textquery&locationbias=circle%3A2000%40${lat}%2C${long}&fields=place_id&key=${apiKey}`;\r\n\r\n        return fetch(searchString)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                if (json.status === 'OK') {\r\n                    return json.candidates[0].place_id;\r\n                }\r\n            })\r\n            .then(placeId => {\r\n                if (placeId) {\r\n                    return `https://www.google.com/maps/search/?api=1&query=Google&query_place_id=${placeId}`;\r\n                } else {\r\n                    return `https://maps.google.com?q=${this.props.business.latitude},${this.props.business.longitude}`\r\n                }\r\n            });\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <img src={this.props.business.imageSrc} alt={this.props.business.name} />\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <Link underline='none' href={this.state.link} target='_blank' rel='noopener noreferrer'>\r\n                            <p>{this.props.business.address}</p>\r\n                            <p>{this.props.business.city}</p>\r\n                            <p>{this.props.business.state}, {this.props.business.zipCode}</p>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{this.props.business.category}</h3>\r\n                        <h3 className=\"rating\">{this.props.business.rating} stars</h3>\r\n                        <p>{this.props.business.reviewCount} reviews</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Business;\r\n","import React from 'react';\r\nimport Business from '../Business/Business';\r\nimport './BusinessList.css';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='BusinessList'>\r\n                {this.props.businesses.map(business => {\r\n                    return <Business business={business} key={business.id}/>\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BusinessList;\r\n","import { Link } from '@mui/material';\r\nimport React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match'\r\n        };\r\n\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n    }\r\n\r\n    sortByOptions = {\r\n        'Best Match': 'best_match',\r\n        'Highest Rated': 'rating',\r\n        'Most Reviewed': 'review_count'\r\n    };\r\n\r\n    getSortByClass(sortByOption) {\r\n        if(this.state.sortBy === sortByOption) {\r\n            return 'active';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    // Handle State Changes\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({\r\n            sortBy: sortByOption\r\n        });\r\n    }\r\n    handleTermChange(event) {\r\n        this.setState({\r\n            term: event.target.value\r\n        });\r\n    }\r\n    handleLocationChange(event) {\r\n        this.setState({\r\n            location: event.target.value\r\n        });\r\n    }\r\n    handleSearch(event) {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        event.preventDefault();\r\n    };\r\n\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n            return (\r\n                <li\r\n                    className={this.getSortByClass(sortByOptionValue)}\r\n                    key={sortByOptionValue}\r\n                    onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\r\n                        {sortByOption}\r\n                </li>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\r\n                    <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <Link underline='none' onClick={this.handleSearch}>Let's Go</Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default SearchBar;\r\n","const apiKey = 'sP5eSul4f480F-oNSWCkmvnp2IlDFR-r2j9JJQHGRYFBI9S8im_raIsnlli7eBNxD8PMYoVwue8MQWW48Wlxde5U73ZXceiuKlfaXhjt2sMo7WcC_e-0EX7g-jdVYHYx'\r\n\r\nconst Yelp = {\r\n  search(term, location, sortBy) {\r\n    return fetch(\r\n      `https://morning-stream-08762.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${apiKey}`\r\n        }\r\n      }\r\n    )\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(jsonResponse => {\r\n        if (jsonResponse.businesses) {\r\n          return jsonResponse.businesses.map(business => {\r\n            return {\r\n              id: business.id,\r\n              imageSrc: business.image_url,\r\n              name: business.name,\r\n              address: business.location.address1,\r\n              city: business.location.city,\r\n              state: business.location.state,\r\n              zipCode: business.location.zip_code,\r\n              category: business.categories[0].title,\r\n              rating: business.rating,\r\n              reviewCount: business.review_count,\r\n              longitude: business.coordinates.longitude,\r\n              latitude: business.coordinates.latitude\r\n            };\r\n          });\r\n        }\r\n      });\r\n  }\r\n};\r\n\r\n\r\nexport default Yelp;\r\n","import React from 'react';\r\nimport BusinessList from './components/BusinessList/BusinessList';\r\nimport SearchBar from './components/SearchBar/SearchBar';\r\nimport Yelp from './util/Yelp';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      'businesses': []\r\n    }\r\n\r\n    this.searchYelp = this.searchYelp.bind(this);\r\n  }\r\n  searchYelp(term, location, sortBy) {\r\n    Yelp.search(term, location, sortBy).then(businesses => {\r\n      this.setState({\r\n        'businesses': businesses\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>ravenous</h1>\r\n        <SearchBar searchYelp={this.searchYelp} />\r\n        <BusinessList businesses={this.state.businesses} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}